// Content script qui s'ex√©cute sur chatgpt.com

let memoryData = [];

// Fonction pour attendre qu'un √©l√©ment soit pr√©sent dans le DOM
function waitForElement(selector, timeout = 10000) {
  return new Promise((resolve, reject) => {
    const startTime = Date.now();
    
    const checkElement = () => {
      const element = document.querySelector(selector);
      if (element) {
        resolve(element);
      } else if (Date.now() - startTime > timeout) {
        reject(new Error(`Element ${selector} not found within ${timeout}ms`));
      } else {
        setTimeout(checkElement, 100);
      }
    };
    
    checkElement();
  });
}

// Fonction pour extraire la m√©moire
async function extractMemory() {
  try {
    console.log('üß† ChatGPT Memory Extractor: D√©but de l\'extraction...');
    
    // V√©rifier si on est sur la page des settings
    if (!window.location.href.includes('#settings/Personalization')) {
      throw new Error('Veuillez naviguer vers Settings > Personalization d\'abord');
    }
    
    // Chercher le bouton "G√©rer" ou "Manage"
    const manageButton = await findManageButton();
    if (!manageButton) {
      throw new Error('Bouton "G√©rer" non trouv√©');
    }
    
    console.log('üîç Bouton "G√©rer" trouv√©, clic...');
    manageButton.click();
    
    // Attendre que la modale s'ouvre
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Extraire les souvenirs
    const memories = await extractMemoriesFromModal();
    
    return {
      success: true,
      data: memories,
      count: memories.length,
      extractedAt: new Date().toISOString()
    };
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'extraction:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

// Fonction pour trouver le bouton G√©rer
async function findManageButton() {
  // Chercher diff√©rentes variantes du bouton
  const buttonSelectors = [
    'button:has-text("G√©rer")',
    'button:has-text("Manage")',
    'button:has-text("Gerer")',
    '[role="button"]:has-text("G√©rer")',
    // Recherche par classe si le texte ne fonctionne pas
    'button.btn',
    'button[class*="manage"]',
    'button[class*="memory"]'
  ];
  
  // Essayer avec les s√©lecteurs CSS standards
  for (const selector of ['button', '[role="button"]', 'div[role="button"]']) {
    const buttons = document.querySelectorAll(selector);
    for (const button of buttons) {
      const text = button.textContent?.toLowerCase().trim();
      if (text && (text.includes('g√©rer') || text.includes('manage') || text.includes('gerer'))) {
        return button;
      }
    }
  }
  
  return null;
}

// Fonction pour extraire les souvenirs de la modale
async function extractMemoriesFromModal() {
  const memories = [];
  
  // Attendre que la modale soit compl√®tement charg√©e
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  console.log('üîç Recherche des souvenirs dans la modale...');
  
  // D'apr√®s les captures d'√©cran, les souvenirs sont dans des divs avec un ID commen√ßant par :r
  // et une classe contenant des styles de flexbox
  const modalContainer = document.querySelector('[role="dialog"]') || 
                        document.querySelector('div[id^="radix-"][id*="content"]') ||
                        document.querySelector('div[class*="overlay"]');
  
  if (!modalContainer) {
    console.log('‚ùå Conteneur de modale non trouv√©');
    // Tentative de clic sur le bouton G√©rer si la modale n'est pas ouverte
    const manageButton = await findManageButton();
    if (manageButton) {
      manageButton.click();
      await new Promise(resolve => setTimeout(resolve, 2000));
      return extractMemoriesFromModal(); // R√©essayer
    }
    return memories;
  }
  
  // Strat√©gie 1: Chercher les √©l√©ments avec des IDs sp√©cifiques (visible dans les DevTools)
  const memoryItems = modalContainer.querySelectorAll('div[id*=":r"][class*="flex"]');
  
  if (memoryItems.length > 0) {
    console.log(`üìù Trouv√© ${memoryItems.length} √©l√©ments potentiels avec ID :r`);
    memoryItems.forEach(item => {
      const text = item.textContent?.trim();
      if (text && text.length > 20 && !isSystemText(text)) {
        if (!isDuplicate(memories, text)) {
          memories.push({
            text: text,
            element: 'memory-item',
            timestamp: new Date().toISOString()
          });
        }
      }
    });
  }
  
  // Strat√©gie 2: Rechercher par structure de classe (d'apr√®s les screenshots)
  if (memories.length === 0) {
    console.log('üìã Tentative avec recherche par classes...');
    
    // Les souvenirs semblent √™tre dans des divs avec des classes de style
    const styledDivs = modalContainer.querySelectorAll('div[class*="text-"], div[class*="border-"], div[class*="rounded-"]');
    
    styledDivs.forEach(div => {
      // V√©rifier si c'est un conteneur de souvenir (pas trop de sous-√©l√©ments)
      if (div.children.length <= 2) {
        const text = extractCleanText(div);
        if (text && text.length > 20 && !isSystemText(text)) {
          if (!isDuplicate(memories, text)) {
            memories.push({
              text: text,
              element: 'styled-div',
              timestamp: new Date().toISOString()
            });
          }
        }
      }
    });
  }
  
  // Strat√©gie 3: Extraction bas√©e sur le contenu visible dans les screenshots
  if (memories.length === 0) {
    console.log('üîé Recherche par contenu sp√©cifique...');
    
    // Chercher le conteneur qui a "92 % utilis√©" pour identifier la bonne zone
    const allElements = modalContainer.querySelectorAll('*');
    let foundMemorySection = false;
    
    for (const element of allElements) {
      const text = element.textContent?.trim();
      
      // Identifier le d√©but de la section des souvenirs
      if (text && (text.includes('% utilis√©') || text.includes('Souvenirs enregistr√©s'))) {
        foundMemorySection = true;
        
        // Chercher le parent qui contient tous les souvenirs
        let parent = element.parentElement;
        while (parent && parent !== modalContainer) {
          // Chercher les divs enfants qui pourraient √™tre des souvenirs
          const childDivs = parent.querySelectorAll('div');
          
          childDivs.forEach(child => {
            // V√©rifier que c'est un √©l√©ment de premier niveau (pas trop imbriqu√©)
            if (getDepth(child, parent) <= 3) {
              const childText = extractCleanText(child);
              if (childText && childText.length > 20 && !isSystemText(childText)) {
                if (!isDuplicate(memories, childText)) {
                  memories.push({
                    text: childText,
                    element: 'content-based',
                    timestamp: new Date().toISOString()
                  });
                }
              }
            }
          });
          
          if (memories.length > 0) break;
          parent = parent.parentElement;
        }
      }
      
      // Extraction directe si on reconna√Æt un pattern de souvenir
      if (foundMemorySection && text && isMemoryPattern(text)) {
        if (!isDuplicate(memories, text)) {
          memories.push({
            text: text,
            element: 'pattern-match',
            timestamp: new Date().toISOString()
          });
        }
      }
    }
  }
  
  // D√©duplication finale et nettoyage
  const cleanedMemories = deduplicateAndClean(memories);
  
  console.log(`‚úÖ ${cleanedMemories.length} souvenirs uniques extraits`);
  return cleanedMemories;
}

// Fonction helper pour v√©rifier si c'est du texte syst√®me
function isSystemText(text) {
  const systemTexts = [
    '% utilis√©', 'Souvenirs enregistr√©s', 'Tout supprimer', 'Delete all',
    'G√©rer', 'Manage', 'Close', 'Fermer', 'Cancel', 'Annuler',
    'M√©moire', 'Memory', 'Settings', 'Param√®tres', 'Personalization'
  ];
  return systemTexts.some(st => text.includes(st));
}

// Fonction helper pour v√©rifier les doublons
function isDuplicate(memories, text) {
  return memories.some(m => 
    m.text === text || 
    m.text.includes(text) || 
    text.includes(m.text)
  );
}

// Fonction helper pour extraire le texte propre d'un √©l√©ment
function extractCleanText(element) {
  // Clone l'√©l√©ment pour ne pas modifier l'original
  const clone = element.cloneNode(true);
  
  // Supprimer les boutons et √©l√©ments de contr√¥le
  clone.querySelectorAll('button, svg, [role="button"]').forEach(el => el.remove());
  
  return clone.textContent?.trim();
}

// Fonction helper pour calculer la profondeur d'un √©l√©ment
function getDepth(element, container) {
  let depth = 0;
  let current = element;
  while (current && current !== container) {
    depth++;
    current = current.parentElement;
  }
  return depth;
}

// Fonction helper pour identifier les patterns de souvenirs
function isMemoryPattern(text) {
  // Patterns bas√©s sur les exemples visibles dans les screenshots
  const patterns = [
    /S√©bastien.*souhaite/i,
    /L'utilisateur.*souhaite/i,
    /pr√©f√®re/i,
    /travaille avec/i,
    /souhaite.*que/i,
    /ne souhaite.*pas/i,
    /^.*aime.*$/i,
    /^.*utilise.*$/i
  ];
  
  return patterns.some(pattern => pattern.test(text));
}

// Fonction pour d√©dupliquer et nettoyer les souvenirs
function deduplicateAndClean(memories) {
  const seen = new Set();
  const cleaned = [];
  
  memories.forEach(memory => {
    // Normaliser le texte
    const normalized = memory.text.replace(/\s+/g, ' ').trim();
    
    // V√©rifier que ce n'est pas un doublon
    if (!seen.has(normalized) && normalized.length > 20) {
      seen.add(normalized);
      cleaned.push({
        ...memory,
        text: normalized
      });
    }
  });
  
  // Trier par longueur (les plus longs d'abord, g√©n√©ralement plus complets)
  return cleaned.sort((a, b) => b.text.length - a.text.length);
}

// √âcouter les messages de la popup
chrome.runtime.onMessage.addListener(async (request, sender, sendResponse) => {
  if (request.action === 'extractMemory') {
    const result = await extractMemory();
    sendResponse(result);
  } else if (request.action === 'checkPage') {
    sendResponse({
      isSettingsPage: window.location.href.includes('#settings/Personalization'),
      currentUrl: window.location.href
    });
  }
  return true; // Indique que la r√©ponse sera asynchrone
});

// Log pour confirmer que le script est charg√©
console.log('üß† ChatGPT Memory Extractor: Content script loaded');
